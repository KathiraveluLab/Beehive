name: Tests

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 20s

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install MongoDB Client
      run: |
        curl -fsSL https://pgp.mongodb.com/server-6.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor
        echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-mongosh
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create dummy client_secret.json
      run: |
        echo '{
          "web": {
            "client_id": "dummy-client-id",
            "project_id": "test-project",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_secret": "dummy-client-secret",
            "redirect_uris": ["http://localhost:5000/callback"]
          }
        }' > client_secret.json
        
    - name: Wait for MongoDB
      run: |
        echo "Checking MongoDB connection..."
        for i in {1..30}; do
          if mongosh --eval "db.runCommand('ping').ok" mongodb://localhost:27017/test --quiet; then
            echo "MongoDB is ready!"
            mongosh --eval "db.runCommand('serverStatus')" mongodb://localhost:27017/test
            exit 0
          fi
          echo "Attempt $i/30: MongoDB not ready yet..."
          sleep 2
        done
        echo "Error: MongoDB failed to become ready"
        echo "Checking MongoDB logs..."
        docker logs $(docker ps -q --filter "ancestor=mongo:6.0")
        exit 1
        
    - name: Run tests
      env:
        MONGODB_URI: mongodb://localhost:27017/beehive_test
        SECRET_KEY: beehive_test
        TESTING: true
        GOOGLE_CLIENT_ID: dummy-client-id
        GOOGLE_CLIENT_SECRET: dummy-client-secret
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python -m pytest -v --cov=app --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true 